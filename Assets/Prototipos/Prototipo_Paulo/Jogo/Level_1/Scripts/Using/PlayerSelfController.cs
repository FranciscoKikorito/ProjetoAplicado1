using UnityEngine;

public class PlayerSelfController : MonoBehaviour
{
    public GameObject white;
    public GameObject black;

    public float speed = 5f;
    public float swapSmooth = 5f;
    public float distanceBetween = 1.2f;

    private bool isWhiteActive = true;
    private Renderer whiteRenderer;
    private Renderer blackRenderer;

    private bool stopped = false;
    private TimingPoint currentTimingPoint;

    private Vector3 targetWhiteScale;
    private Vector3 targetBlackScale;
    private Color targetWhiteColor;
    private Color targetBlackColor;
    private Vector3 targetWhitePosition;
    private Vector3 targetBlackPosition;

    void Start()
    {
        whiteRenderer = white.GetComponent<Renderer>();
        blackRenderer = black.GetComponent<Renderer>();

        ApplyVisualState();
        ApplyPositionState();
    }

    void Update()
    {
        if (stopped) return;

        // Movimento autom√°tico
        transform.position += Vector3.forward * speed * Time.deltaTime;

        HandleInput();

        // Atualiza visual suavemente
        UpdateVisualTransition();
    }

    void HandleInput()
    {
        // üñ±Ô∏è Clique direito ‚Üí trocar personagem
        if (Input.GetMouseButtonDown(1))
        {
            isWhiteActive = !isWhiteActive;
            ApplyVisualState();
            ApplyPositionState();
        }

        // üñ±Ô∏è Clique esquerdo ‚Üí tentar a√ß√£o (construir ou destruir)
        if (Input.GetMouseButtonDown(0))
        {
            TryPerformAction();
        }
    }

    // üîπ Alternar visuais
    void ApplyVisualState()
    {
        if (isWhiteActive)
        {
            targetWhiteScale = Vector3.one * 1.2f;
            targetBlackScale = Vector3.one * 0.8f;

            targetWhiteColor = new Color(1f, 1f, 1f, 1f);
            targetBlackColor = new Color(0f, 0f, 0f, 0.5f);
        }
        else
        {
            targetWhiteScale = Vector3.one * 0.8f;
            targetBlackScale = Vector3.one * 1.2f;

            targetWhiteColor = new Color(1f, 1f, 1f, 0.4f);
            targetBlackColor = new Color(0f, 0f, 0f, 1f);
        }
    }

    // üîπ Alternar posi√ß√£o (frente e tr√°s)
    void ApplyPositionState()
    {
        if (isWhiteActive)
        {
            targetWhitePosition = Vector3.forward * (distanceBetween / 2f);
            targetBlackPosition = Vector3.back * (distanceBetween / 2f);
        }
        else
        {
            targetWhitePosition = Vector3.back * (distanceBetween / 2f);
            targetBlackPosition = Vector3.forward * (distanceBetween / 2f);
        }
    }

    // üîπ Atualiza√ß√£o visual suave
    void UpdateVisualTransition()
    {
        white.transform.localScale = Vector3.Lerp(white.transform.localScale, targetWhiteScale, Time.deltaTime * swapSmooth);
        black.transform.localScale = Vector3.Lerp(black.transform.localScale, targetBlackScale, Time.deltaTime * swapSmooth);

        whiteRenderer.material.color = Color.Lerp(whiteRenderer.material.color, targetWhiteColor, Time.deltaTime * swapSmooth);
        blackRenderer.material.color = Color.Lerp(blackRenderer.material.color, targetBlackColor, Time.deltaTime * swapSmooth);

        white.transform.localPosition = Vector3.Lerp(white.transform.localPosition, targetWhitePosition, Time.deltaTime * swapSmooth);
        black.transform.localPosition = Vector3.Lerp(black.transform.localPosition, targetBlackPosition, Time.deltaTime * swapSmooth);
    }

    // üîπ A√ß√£o (construir / destruir)
    private void TryPerformAction()
    {
        if (currentTimingPoint == null)
        {
            Debug.Log("‚ùå Nenhum ponto de timing detectado!");
            return;
        }

        if (isWhiteActive && currentTimingPoint.actionType == TimingPoint.ActionType.Build)
        {
            Debug.Log("üèóÔ∏è Construindo ponte!");
            BuildBridge(currentTimingPoint);
        }
        else if (!isWhiteActive && currentTimingPoint.actionType == TimingPoint.ActionType.Destroy)
        {
            Debug.Log("üí• Destruindo parede!");
            DestroyWall(currentTimingPoint);
        }
        else
        {
            Debug.Log("‚ö†Ô∏è Personagem errado para esta a√ß√£o!");
        }

        currentTimingPoint = null;
    }

    // ‚úÖ Ativa a ponte pr√©-colocada na cena
    private void BuildBridge(TimingPoint tp)
    {
        if (tp.associatedObject != null)
        {
            tp.associatedObject.SetActive(true);
            Debug.Log("‚úÖ Ponte ativada!");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Nenhuma ponte associada neste TimingPoint!");
        }
    }

    // ‚úÖ Destr√≥i a parede associada (n√£o o pr√≥prio ponto)
    private void DestroyWall(TimingPoint tp)
    {
        if (tp.associatedObject != null)
        {
            Destroy(tp.associatedObject);
            Debug.Log("‚úÖ Parede destru√≠da!");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Nenhuma parede associada neste TimingPoint!");
        }
    }

    public void StopMovement()
    {
        stopped = true;
    }

    // üîπ Detectar entrada e sa√≠da dos pontos
    private void OnTriggerEnter(Collider other)
    {
        TimingPoint tp = other.GetComponent<TimingPoint>();
        if (tp != null)
        {
            currentTimingPoint = tp;
            Debug.Log($"‚è±Ô∏è Entrou no ponto de timing: {tp.actionType}");
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.GetComponent<TimingPoint>() == currentTimingPoint)
        {
            Debug.Log("‚è±Ô∏è Saiu do ponto de timing");
            currentTimingPoint = null;
        }
    }
}
